body {
    font-family: Arial, sans-serif;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100vh;
    margin: 0;
    background-color: #f0f0f0;
}

h1 {
    margin-bottom: 10px;
}

p {
    margin-bottom: 20px;
}

.container {
    display: flex;
    justify-content: space-between;
    width: 80%;
}

.words, .descriptions {
    display: flex;
    flex-direction: column;
    width: 45%;
}

.word, .description {
    padding: 10px;
    margin: 5px;
    background-color: #fff;
    border: 1px solid #ccc;
    border-radius: 5px;
    cursor: pointer;
}

.description {
    min-height: 50px;
}

.word.dragging {
    opacity: 0.5;
}

.description.over {
    border-color: #000;
}

button {
    margin: 10px;
    padding: 10px 20px;
    font-size: 16px;
    cursor: pointer;
}

#result {
    margin-top: 20px;
    font-size: 18px;
}

.popup {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.4);
}

.popup-content {
    background-color: #fff;
    margin: 15% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
    max-width: 500px;
    text-align: center;
    border-radius: 10px;
}

.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.close:hover,
.close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
');

const scoreDisplay = document.getElementById('score');
const retryButton = document.getElementById('retry');
const seeAnswersButton = document.getElementById('see-answers');
const quitButton = document.getElementById('quit');

words.forEach(word => {
    word.addEventListener('dragstart', dragStart);
    word.addEventListener('dragend', dragEnd);
});

descriptions.forEach(description => {
    description.addEventListener('dragover', dragOver);
    description.addEventListener('dragenter', dragEnter);
    description.addEventListener('dragleave', dragLeave);
    description.addEventListener('drop', drop);
});

verifyButton.addEventListener('click', verifyAnswers);
resetButton.addEventListener('click', resetGame);
closePopup.addEventListener('click', closePopupWindow);
retryButton.addEventListener('click', retryGame);
seeAnswersButton.addEventListener('click', closePopupWindow);
quitButton.addEventListener('click', closeGame);

function dragStart(e) {
    e.dataTransfer.setData('text/plain', e.target.id);
    setTimeout(() => {
        e.target.classList.add('dragging');
    }, 0);
}

function dragEnd(e) {
    e.target.classList.remove('dragging');
}

function dragOver(e) {
    e.preventDefault();
}

function dragEnter(e) {
    e.preventDefault();
    e.target.classList.add('over');
}

function dragLeave(e) {
    e.target.classList.remove('over');
}

function drop(e) {
    const id = e.dataTransfer.getData('text');
    const draggable = document.getElementById(id);
    if (e.target.classList.contains('description') && !e.target.querySelector('.word')) {
        e.target.appendChild(draggable);
        e.target.classList.remove('over');
    } else if (e.target.classList.contains('words')) {
        e.target.appendChild(draggable);
    }
}

function verifyAnswers() {
    let correct = 0;
    descriptions.forEach(description => {
        const word = description.querySelector('.word');
        if (word && word.id === description.dataset.word) {
            correct++;
            description.style.backgroundColor = 'lightgreen';
        } else {
            description.style.backgroundColor = 'lightcoral';
        }
    });
    scoreDisplay.textContent = `You got ${correct} out of ${descriptions.length} correct.`;
    popup.style.display = 'block';
}

function resetGame() {
    descriptions.forEach(description => {
        if (description.querySelector('.word')) {
            document.getElementById('words').appendChild(description.querySelector('.word'));
        }
        description.style.backgroundColor = '#fff';
    });
    scoreDisplay.textContent = '';
    popup.style.display = 'none';
}

function closePopupWindow() {
    popup.style.display = 'none';
}

function retryGame() {
    resetGame();
    popup.style.display = 'none';
}

function closeGame() {
    window.close();
}